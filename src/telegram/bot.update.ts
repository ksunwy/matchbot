import { Update, Start, Hears, On, Ctx } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../users/user.entity';
import { Payment } from '../payments/payment.entity';
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';
import * as path from 'path';
import { SubscriptionService } from './services/subscription.service';

@Update()
@Injectable()
export class BotUpdate {
  constructor(
    @InjectRepository(User) private usersRepo: Repository<User>,
    @InjectRepository(Payment) private payRepo: Repository<Payment>,
    private readonly subscriptionService: SubscriptionService,
  ) {}

  @Start()
  async start(ctx: Context) {
    try {
      const tgId = String(ctx.from.id);
      const exists = await this.usersRepo.findOne({ where: { telegramId: tgId } });
      if (!exists) {
        const user = this.usersRepo.create({
          telegramId: tgId,
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
        });
        await this.usersRepo.save(user);
      }

      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç üëã\n\n` +
        `–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –ø–æ–¥–±–æ—Ä–∫—É –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç:\n\n` +
        `üöÄ –£—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É ‚Äî –º–µ–Ω—å—à–µ —Ä—É—Ç–∏–Ω—ã, –±–æ–ª—å—à–µ –∫–æ–¥–∞;\n` +
        `üé® –£–ª—É—á—à–∏—Ç—å UI ‚Äî –¥–∞–∂–µ –±–µ–∑ –ø–æ–º–æ—â–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞;\n` +
        `üßπ –î–µ–ª–∞—Ç—å –∫–æ–¥ —á–∏—â–µ ‚Äî –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º.\n\n` +
        `–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üìö‚ú®`,
        Markup.keyboard([
          ['üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üíé –ü–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'],
          ['üì¨ –°–≤—è–∑–∞—Ç—å—Å—è']
        ]).resize()
      );
    } catch (error) {
      console.error('Error in start:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @Hears('üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
  async freeMaterials(ctx: Context) {
    try {
      const subscribed = await this.subscriptionService.isUserSubscribed(ctx);
      if (!subscribed) {
        await ctx.reply(
          `üö´ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @webdevmatch.\n\n` +
          `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
          Markup.inlineKeyboard([
            [Markup.button.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'https://t.me/webdevmatch')],
            [Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
          ])
        );
        return;
      }

      await ctx.reply(
        `–í–æ—Ç —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìÑ Frontend Shortcuts', 'free_shortcuts')],
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
        ])
      );
    } catch (error) {
      console.error('Error in freeMaterials:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @Hears('üíé –ü–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
  async paidProducts(ctx: Context) {
    try {
      await ctx.reply(
        `–ü–æ–∫–∞ —á—Ç–æ –ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
        ])
      );
    } catch (error) {
      console.error('Error in paidProducts:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: Context) {
    const callbackQuery = ctx.callbackQuery as CallbackQuery.DataQuery;
    const callbackData = callbackQuery.data;

    try {
      switch (callbackData) {
        case 'free_shortcuts': {
          const filePath = path.resolve('src/files/frontend_shortcuts.pdf');
          await ctx.answerCbQuery();
          await ctx.replyWithDocument({ source: filePath, filename: 'Frontend_Shortcuts.pdf' });
          break;
        }

        case 'main_menu': {
          await ctx.answerCbQuery();
          await ctx.reply(
            `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:`,
            Markup.keyboard([
              ['üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üíé –ü–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'],
              ['üì¨ –°–≤—è–∑–∞—Ç—å—Å—è']
            ]).resize()
          );
          break;
        }

        case 'check_subscription': {
          await ctx.answerCbQuery();
          const subscribed = await this.subscriptionService.isUserSubscribed(ctx);
          if (subscribed) {
            await ctx.reply('üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.');
            await this.freeMaterials(ctx);
          } else {
            await ctx.reply(
              `üòï –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @webdevmatch.\n` +
              `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.`
            );
          }
          break;
        }

        default:
          await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
          break;
      }
    } catch (error) {
      console.error('Error in callback query handler:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @Hears('üì¨ –°–≤—è–∑–∞—Ç—å—Å—è')
  async contact(ctx: Context) {
    try {
      await ctx.reply('üì¨ –ü–∏—à–∏ —Å—é–¥–∞: @ksunnw\n–û—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.');
    } catch (error) {
      console.error('Error in contact:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}
